#version 460

#extension GL_EXT_scalar_block_layout : require

// Auto-generated from PSF2 (8x16)
// Packing convention:
//   Each glyph uses uvec4 {w0,w1,w2,w3} (16 bytes total).
//   width<=8 -> one byte per row. Rows are MSB-first per PSF2.
//   w0 contains rows 0..3 (row0 in MSB byte), w1 rows 4..7, etc.
//   If height < 32, trailing rows are zero.

const uint WIDTH  = 8u;
const uint HEIGHT = 16u;
const uvec4 font_data[96] = {
  uvec4(0x00000000, 0x00000000, 0x00000000, 0x00000000), // 0x20: ' '
  uvec4(0x00001010, 0x10101010, 0x10001010, 0x00000000), // 0x21: '!'
  uvec4(0x00242424, 0x00000000, 0x00000000, 0x00000000), // 0x22: '"'
  uvec4(0x00002424, 0x247E2424, 0x7E242424, 0x00000000), // 0x23: '#'
  uvec4(0x0010107C, 0x9290907C, 0x1212927C, 0x10100000), // 0x24: '$'
  uvec4(0x00006494, 0x68081010, 0x202C524C, 0x00000000), // 0x25: '%'
  uvec4(0x00001824, 0x2418304A, 0x4444443A, 0x00000000), // 0x26: '&'
  uvec4(0x00101010, 0x00000000, 0x00000000, 0x00000000), // 0x27: '\''
  uvec4(0x00000810, 0x20202020, 0x20201008, 0x00000000), // 0x28: '('
  uvec4(0x00002010, 0x08080808, 0x08081020, 0x00000000), // 0x29: ')'
  uvec4(0x00000000, 0x0024187E, 0x18240000, 0x00000000), // 0x2A: '*'
  uvec4(0x00000000, 0x0010107C, 0x10100000, 0x00000000), // 0x2B: '+'
  uvec4(0x00000000, 0x00000000, 0x00001010, 0x20000000), // 0x2C: ','
  uvec4(0x00000000, 0x0000007E, 0x00000000, 0x00000000), // 0x2D: '-'
  uvec4(0x00000000, 0x00000000, 0x00001010, 0x00000000), // 0x2E: '.'
  uvec4(0x00000404, 0x08081010, 0x20204040, 0x00000000), // 0x2F: '/'
  uvec4(0x00003C42, 0x42464A52, 0x6242423C, 0x00000000), // 0x30: '0'
  uvec4(0x00000818, 0x28080808, 0x0808083E, 0x00000000), // 0x31: '1'
  uvec4(0x00003C42, 0x42020408, 0x1020407E, 0x00000000), // 0x32: '2'
  uvec4(0x00003C42, 0x42021C02, 0x0242423C, 0x00000000), // 0x33: '3'
  uvec4(0x00000206, 0x0A122242, 0x7E020202, 0x00000000), // 0x34: '4'
  uvec4(0x00007E40, 0x40407C02, 0x0202423C, 0x00000000), // 0x35: '5'
  uvec4(0x00001C20, 0x40407C42, 0x4242423C, 0x00000000), // 0x36: '6'
  uvec4(0x00007E02, 0x02040408, 0x08101010, 0x00000000), // 0x37: '7'
  uvec4(0x00003C42, 0x42423C42, 0x4242423C, 0x00000000), // 0x38: '8'
  uvec4(0x00003C42, 0x4242423E, 0x02020438, 0x00000000), // 0x39: '9'
  uvec4(0x00000000, 0x00101000, 0x00001010, 0x00000000), // 0x3A: ':'
  uvec4(0x00000000, 0x00101000, 0x00001010, 0x20000000), // 0x3B: ';'
  uvec4(0x00000004, 0x08102040, 0x20100804, 0x00000000), // 0x3C: '<'
  uvec4(0x00000000, 0x007E0000, 0x7E000000, 0x00000000), // 0x3D: '='
  uvec4(0x00000040, 0x20100804, 0x08102040, 0x00000000), // 0x3E: '>'
  uvec4(0x00003C42, 0x42420408, 0x08000808, 0x00000000), // 0x3F: '?'
  uvec4(0x00007C82, 0x9EA2A2A2, 0xA69A807E, 0x00000000), // 0x40: '@'
  uvec4(0x00003C42, 0x4242427E, 0x42424242, 0x00000000), // 0x41: 'A'
  uvec4(0x00007C42, 0x42427C42, 0x4242427C, 0x00000000), // 0x42: 'B'
  uvec4(0x00003C42, 0x42404040, 0x4042423C, 0x00000000), // 0x43: 'C'
  uvec4(0x00007844, 0x42424242, 0x42424478, 0x00000000), // 0x44: 'D'
  uvec4(0x00007E40, 0x40407840, 0x4040407E, 0x00000000), // 0x45: 'E'
  uvec4(0x00007E40, 0x40407840, 0x40404040, 0x00000000), // 0x46: 'F'
  uvec4(0x00003C42, 0x4240404E, 0x4242423C, 0x00000000), // 0x47: 'G'
  uvec4(0x00004242, 0x42427E42, 0x42424242, 0x00000000), // 0x48: 'H'
  uvec4(0x00003810, 0x10101010, 0x10101038, 0x00000000), // 0x49: 'I'
  uvec4(0x00000E04, 0x04040404, 0x04444438, 0x00000000), // 0x4A: 'J'
  uvec4(0x00004244, 0x48506060, 0x50484442, 0x00000000), // 0x4B: 'K'
  uvec4(0x00004040, 0x40404040, 0x4040407E, 0x00000000), // 0x4C: 'L'
  uvec4(0x000082C6, 0xAA928282, 0x82828282, 0x00000000), // 0x4D: 'M'
  uvec4(0x00004242, 0x4262524A, 0x46424242, 0x00000000), // 0x4E: 'N'
  uvec4(0x00003C42, 0x42424242, 0x4242423C, 0x00000000), // 0x4F: 'O'
  uvec4(0x00007C42, 0x4242427C, 0x40404040, 0x00000000), // 0x50: 'P'
  uvec4(0x00003C42, 0x42424242, 0x42424A3C, 0x02000000), // 0x51: 'Q'
  uvec4(0x00007C42, 0x4242427C, 0x50484442, 0x00000000), // 0x52: 'R'
  uvec4(0x00003C42, 0x40403C02, 0x0242423C, 0x00000000), // 0x53: 'S'
  uvec4(0x0000FE10, 0x10101010, 0x10101010, 0x00000000), // 0x54: 'T'
  uvec4(0x00004242, 0x42424242, 0x4242423C, 0x00000000), // 0x55: 'U'
  uvec4(0x00004242, 0x42424224, 0x24241818, 0x00000000), // 0x56: 'V'
  uvec4(0x00008282, 0x82828282, 0x92AAC682, 0x00000000), // 0x57: 'W'
  uvec4(0x00004242, 0x24241818, 0x24244242, 0x00000000), // 0x58: 'X'
  uvec4(0x00008282, 0x44442810, 0x10101010, 0x00000000), // 0x59: 'Y'
  uvec4(0x00007E02, 0x02040810, 0x2040407E, 0x00000000), // 0x5A: 'Z'
  uvec4(0x00003820, 0x20202020, 0x20202038, 0x00000000), // 0x5B: '['
  uvec4(0x00004040, 0x20201010, 0x08080404, 0x00000000), // 0x5C: '\\'
  uvec4(0x00003808, 0x08080808, 0x08080838, 0x00000000), // 0x5D: ']'
  uvec4(0x00102844, 0x00000000, 0x00000000, 0x00000000), // 0x5E: '^'
  uvec4(0x00000000, 0x00000000, 0x00000000, 0x007E0000), // 0x5F: '_'
  uvec4(0x10080000, 0x00000000, 0x00000000, 0x00000000), // 0x60: '`'
  uvec4(0x00000000, 0x003C023E, 0x4242423E, 0x00000000), // 0x61: 'a'
  uvec4(0x00004040, 0x407C4242, 0x4242427C, 0x00000000), // 0x62: 'b'
  uvec4(0x00000000, 0x003C4240, 0x4040423C, 0x00000000), // 0x63: 'c'
  uvec4(0x00000202, 0x023E4242, 0x4242423E, 0x00000000), // 0x64: 'd'
  uvec4(0x00000000, 0x003C4242, 0x7E40403C, 0x00000000), // 0x65: 'e'
  uvec4(0x00000E10, 0x107C1010, 0x10101010, 0x00000000), // 0x66: 'f'
  uvec4(0x00000000, 0x003E4242, 0x4242423E, 0x02023C00), // 0x67: 'g'
  uvec4(0x00004040, 0x407C4242, 0x42424242, 0x00000000), // 0x68: 'h'
  uvec4(0x00001010, 0x00301010, 0x10101038, 0x00000000), // 0x69: 'i'
  uvec4(0x00000404, 0x000C0404, 0x04040404, 0x44443800), // 0x6A: 'j'
  uvec4(0x00004040, 0x40424448, 0x70484442, 0x00000000), // 0x6B: 'k'
  uvec4(0x00003010, 0x10101010, 0x10101038, 0x00000000), // 0x6C: 'l'
  uvec4(0x00000000, 0x00FC9292, 0x92929292, 0x00000000), // 0x6D: 'm'
  uvec4(0x00000000, 0x007C4242, 0x42424242, 0x00000000), // 0x6E: 'n'
  uvec4(0x00000000, 0x003C4242, 0x4242423C, 0x00000000), // 0x6F: 'o'
  uvec4(0x00000000, 0x007C4242, 0x4242427C, 0x40404000), // 0x70: 'p'
  uvec4(0x00000000, 0x003E4242, 0x4242423E, 0x02020200), // 0x71: 'q'
  uvec4(0x00000000, 0x005E6040, 0x40404040, 0x00000000), // 0x72: 'r'
  uvec4(0x00000000, 0x003E4040, 0x3C02027C, 0x00000000), // 0x73: 's'
  uvec4(0x00001010, 0x107C1010, 0x1010100E, 0x00000000), // 0x74: 't'
  uvec4(0x00000000, 0x00424242, 0x4242423E, 0x00000000), // 0x75: 'u'
  uvec4(0x00000000, 0x00424242, 0x24241818, 0x00000000), // 0x76: 'v'
  uvec4(0x00000000, 0x00828292, 0x9292927C, 0x00000000), // 0x77: 'w'
  uvec4(0x00000000, 0x00424224, 0x18244242, 0x00000000), // 0x78: 'x'
  uvec4(0x00000000, 0x00424242, 0x4242423E, 0x02023C00), // 0x79: 'y'
  uvec4(0x00000000, 0x007E0408, 0x1020407E, 0x00000000), // 0x7A: 'z'
  uvec4(0x00000C10, 0x10102010, 0x1010100C, 0x00000000), // 0x7B: '{'
  uvec4(0x00001010, 0x10101010, 0x10101010, 0x00000000), // 0x7C: '|'
  uvec4(0x00003008, 0x08080408, 0x08080830, 0x00000000), // 0x7D: '}'
  uvec4(0x0062928C, 0x00000000, 0x00000000, 0x00000000), // 0x7E: '~'
  uvec4(0x08100000, 0x00000000, 0x00000000, 0x00000000), // 0x7F: BACKSPACE
};

layout(scalar, set=0, binding=0) uniform TextLineUBO {
	uint words[64];
	ivec2 origin_px;
	uint word_count;
	int pad;
	vec4 fg;
	vec4 bg;
} text_line;

bool GlyphPixel(uint glyph_idx, uint x, uint y) {
		uint rows = font_data[glyph_idx][y / 4];
    uint row = (rows >> (8u * (3u - (y % 4)))) & 0xFFu;
    uint bit = (row >> (7u - x)) & 1u;
    return bit != 0u;
}

layout(location = 0) out vec4 out_color;

void main() {
	ivec2 top_left_pos = ivec2(gl_FragCoord.xy) - text_line.origin_px;
	if (top_left_pos.x < 0) discard;
	if (top_left_pos.y < 0) discard;
	if (top_left_pos.y >= int(HEIGHT)) discard;

	uint line_width_px = text_line.word_count * 4 * WIDTH;
	if (top_left_pos.x >= line_width_px) discard;

	int cx = top_left_pos.x / int(WIDTH);
	int gx = top_left_pos.x % int(WIDTH);

	uint ch = (text_line.words[cx / 4] >> ((cx % 4) * 8u)) & 0xFFu;
	if (ch != 0 && GlyphPixel(uint(ch - 0x20), gx, top_left_pos.y)) 
		out_color = text_line.fg;
	else
		out_color = text_line.bg;
}

